// <auto-generated />
using System;
using ECommerceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250205221255_Change ReturnProductOrder to Return")]
    partial class ChangeReturnProductOrdertoReturn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceAPI.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceAPI.Models.CartProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sports, Instruments & Accessories"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toys, Games, Video Games & Accessories"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arts, Crafts & Sewing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Clothing, Shoes & Jewelry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beauty & Personal Care"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Electronics & Accessories"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Software"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Grocery & Gourmet Food"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Home Furniture & Accessories"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Luggage & Travel Gear"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pet Supplies"
                        });
                });

            modelBuilder.Entity("ECommerceAPI.Models.DeleteHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeleteDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeletedId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeleterId");

                    b.ToTable("DeletesHistory");
                });

            modelBuilder.Entity("ECommerceAPI.Models.EditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("EditHistories");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeliveryNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymobOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalCents")
                        .HasColumnType("bigint");

                    b.Property<string>("TransporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("TransporterId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceAPI.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PartiallyOrFullyReturnedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("ProductPriceCents")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("SalePercent")
                        .HasColumnType("real");

                    b.Property<int>("WarrantyDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PriceCents")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalePercent")
                        .HasColumnType("int");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.Property<int>("WarrantyDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High-quality tennis racket for professionals.",
                            Name = "Wilson Tennis Racket",
                            PriceCents = 8999L,
                            Quantity = 10001,
                            SKU = "SPT-0001",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 730
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Top-notch acoustic guitar with a smooth finish.",
                            Name = "Yamaha Acoustic Guitar",
                            PriceCents = 14999L,
                            Quantity = 10002,
                            SKU = "SPT-0002",
                            SalePercent = 15,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Latest EA sports soccer game ps5 edition.",
                            Name = "EA sports FC24 for PS5",
                            PriceCents = 12999L,
                            Quantity = 10003,
                            SKU = "TOY-0001",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 14
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Official size soccer ball for all levels.",
                            Name = "Adidas Soccer Ball",
                            PriceCents = 2999L,
                            Quantity = 10004,
                            SKU = "SPT-0003",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete badminton set for backyard fun.",
                            Name = "Wilson Badminton Set",
                            PriceCents = 4599L,
                            Quantity = 10005,
                            SKU = "SPT-0004",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buildable Star Wars-themed LEGO set.",
                            Name = "LEGO Star Wars Set",
                            PriceCents = 7999L,
                            Quantity = 20001,
                            SKU = "TOY-0002",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 183
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Next-generation gaming console with ultra-high-speed SSD.",
                            Name = "PlayStation 5 Console",
                            PriceCents = 49999L,
                            Quantity = 20002,
                            SKU = "TOY-0003",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Powerful gaming console with immersive gameplay.",
                            Name = "Xbox Series X",
                            PriceCents = 49999L,
                            Quantity = 20003,
                            SKU = "TOY-0004",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Portable gaming console for versatile play.",
                            Name = "Nintendo Switch",
                            PriceCents = 29999L,
                            Quantity = 20004,
                            SKU = "TOY-0005",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic board game for family and friends.",
                            Name = "Hasbro Monopoly Game",
                            PriceCents = 1999L,
                            Quantity = 20005,
                            SKU = "TOY-0006",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Reliable sewing machine for all skill levels.",
                            Name = "Singer Sewing Machine",
                            PriceCents = 15999L,
                            Quantity = 30001,
                            SKU = "ART-0001",
                            SalePercent = 20,
                            Views = 0L,
                            WarrantyDays = 1095
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Versatile cutting machine for crafting projects.",
                            Name = "Cricut Maker Machine",
                            PriceCents = 39999L,
                            Quantity = 30002,
                            SKU = "ART-0002",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 730
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High-quality colored pencils for artists.",
                            Name = "Faber-Castell Colored Pencils",
                            PriceCents = 2499L,
                            Quantity = 30003,
                            SKU = "ART-0003",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Alcohol-based markers for smooth blending.",
                            Name = "Prismacolor Markers",
                            PriceCents = 3999L,
                            Quantity = 30004,
                            SKU = "ART-0004",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Premium watercolor paints for artists.",
                            Name = "Schmincke Watercolors",
                            PriceCents = 5999L,
                            Quantity = 30005,
                            SKU = "ART-0005",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Classic straight-fit jeans for men.",
                            Name = "Levi's Denim Jeans",
                            PriceCents = 4999L,
                            Quantity = 40001,
                            SKU = "CLT-0001",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comfortable and stylish sneakers for daily wear.",
                            Name = "Nike Air Max Sneakers",
                            PriceCents = 8999L,
                            Quantity = 40002,
                            SKU = "CLT-0002",
                            SalePercent = 15,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soft cotton T-shirt with modern fit.",
                            Name = "Calvin Klein T-shirt",
                            PriceCents = 1999L,
                            Quantity = 40003,
                            SKU = "CLT-0003",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Iconic sunglasses with a timeless design.",
                            Name = "Ray-Ban Aviator Sunglasses",
                            PriceCents = 14999L,
                            Quantity = 40004,
                            SKU = "CLT-0004",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Luxury leather handbag with modern style.",
                            Name = "Michael Kors Leather Handbag",
                            PriceCents = 29999L,
                            Quantity = 40005,
                            SKU = "CLT-0005",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 730
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Powerful hair dryer with multiple heat settings.",
                            Name = "Revlon Hair Dryer",
                            PriceCents = 3999L,
                            Quantity = 50001,
                            SKU = "BPC-0001",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Anti-aging cream for daily use.",
                            Name = "Olay Regenerist Cream",
                            PriceCents = 2999L,
                            Quantity = 50002,
                            SKU = "BPC-0002",
                            SalePercent = 5,
                            Views = 0L,
                            WarrantyDays = 365
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cordless electric shaver with precision blades.",
                            Name = "Philips Electric Shaver",
                            PriceCents = 7999L,
                            Quantity = 50003,
                            SKU = "BPC-0003",
                            SalePercent = 15,
                            Views = 0L,
                            WarrantyDays = 730
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rechargeable toothbrush with multiple brush heads.",
                            Name = "Oral-B Electric Toothbrush",
                            PriceCents = 5999L,
                            Quantity = 50004,
                            SKU = "BPC-0004",
                            SalePercent = 10,
                            Views = 0L,
                            WarrantyDays = 730
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moisturizing body wash for soft skin.",
                            Name = "Dove Body Wash",
                            PriceCents = 1299L,
                            Quantity = 50005,
                            SKU = "BPC-0005",
                            SalePercent = 0,
                            Views = 0L,
                            WarrantyDays = 365
                        });
                });

            modelBuilder.Entity("ECommerceAPI.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MaxSaleCents")
                        .HasColumnType("bigint");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Code = "SUMMER2024",
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SUMMER2024",
                            MaxSaleCents = 5000L,
                            Percent = 10
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Code = "WELCOME10",
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WELCOME10",
                            Percent = 10
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Code = "HOLIDAY25",
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HOLIDAY25",
                            MaxSaleCents = 15000L,
                            Percent = 25
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Code = "SPRING2024",
                            CreatedDateTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SPRING2024",
                            MaxSaleCents = 8000L,
                            Percent = 15
                        });
                });

            modelBuilder.Entity("ECommerceAPI.Models.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderProductId");

                    b.HasIndex("TransporterId");

                    b.HasIndex("UserId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("ECommerceAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WishListId");

                    b.HasIndex("WishListId");

                    b.ToTable("ProductUser");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Address", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ECommerceAPI.Models.Cart", b =>
                {
                    b.HasOne("ECommerceAPI.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("ECommerceAPI.Models.CartProduct", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Cart", null)
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ECommerceAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceAPI.Models.DeleteHistory", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deleter");
                });

            modelBuilder.Entity("ECommerceAPI.Models.EditHistory", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Address", null)
                        .WithMany("EditsHistory")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.Product", null)
                        .WithMany("EditsHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.PromoCode", null)
                        .WithMany("EditsHistory")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.Review", null)
                        .WithMany("EditsHistory")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany("EditsHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Order", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("ECommerceAPI.Models.User", "Transporter")
                        .WithMany()
                        .HasForeignKey("TransporterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PromoCode");

                    b.Navigation("Transporter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceAPI.Models.OrderProduct", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ECommerceAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Product", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Return", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.OrderProduct", "OrderProduct")
                        .WithMany()
                        .HasForeignKey("OrderProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.User", "Transporter")
                        .WithMany()
                        .HasForeignKey("TransporterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany("Returns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Order");

                    b.Navigation("OrderProduct");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Review", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Search", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECommerceAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceAPI.Models.User", b =>
                {
                    b.HasOne("ECommerceAPI.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.HasOne("ECommerceAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceAPI.Models.Address", b =>
                {
                    b.Navigation("EditsHistory");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Product", b =>
                {
                    b.Navigation("EditsHistory");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommerceAPI.Models.PromoCode", b =>
                {
                    b.Navigation("EditsHistory");
                });

            modelBuilder.Entity("ECommerceAPI.Models.Review", b =>
                {
                    b.Navigation("EditsHistory");
                });

            modelBuilder.Entity("ECommerceAPI.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EditsHistory");

                    b.Navigation("Orders");

                    b.Navigation("Returns");
                });
#pragma warning restore 612, 618
        }
    }
}
